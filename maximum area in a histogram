using o3n time and o2n extra space 
  void prev(vector<int> &prevs ,long long arr[],int n)
    {
        stack<int> st;
        
        for(int i=0;i<n;i++)
        {
            while(!st.empty() and arr[st.top()]>=arr[i])
            st.pop();
            
            if(st.empty())
            prevs[i]=-1;
            else
            prevs[i]=st.top();
            st.push(i);
        }
    }
    
    void next(vector<int> &nexts,long long arr[],int n)
    {
        stack<int> st;
        for(int i=n-1;i>=0;i--)
        {
            while(!st.empty() and arr[st.top()]>=arr[i])
            st.pop();
            
            if(st.empty())
            nexts[i]=n;
            else
            nexts[i]=st.top();
            st.push(i);
        }
        
    }
   
    long long getMaxArea(long long arr[], int n)
    {
  
        vector< int >prevs(n,0);
        vector<int> nexts(n,0);
        prev(prevs,arr,n);

        next(nexts,arr,n);
        long long ans=0;
        for(long long i=0;i<n;i++)
        {
        int lefter= prevs[i];
        int righter=nexts[i];
        
            int test= righter- lefter -1;
            long long temp=( test )*(arr[i]);
            ans=max(ans,temp);
        }
        return ans;
        // Your code here
    }
